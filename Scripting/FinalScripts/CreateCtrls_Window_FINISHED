global proc CTRLGUI(){
        
    string $createCtrlsWindow = "RandomLocationGenerator";
    
    if (`window -exists $createCtrlsWindow`)
    deleteUI $createCtrlsWindow;
   
   
    $createCtrlsWindow = `window -widthHeight 300 150 -title "Control Constraints"`; 

    columnLayout -columnAttach "both" 20 -rowSpacing 10 -columnWidth 300;
        
    text -label "";
    text -label "Create Controls";
     
    string $colorVar;
    
    string $ctrlColorOption = `optionMenu -label "Control Color"`;
            menuItem -label "Green";
            menuItem -label "Yellow";
            menuItem -label "Red";
            menuItem -label "Blue";
            menuItem -label "Light Yellow";
            menuItem -label "Black";
            menuItem -label "White";
            menuItem -label "Dark Blue";  
            
    string $ctrlShapeOption = `optionMenu -label "Control Shape"`;
            menuItem -label "Circle";
            menuItem -label "Diamond";
            menuItem -label "Square";
            menuItem -label "Arc";
            menuItem -label "Pin";              
            
    button -label "EXECUTE" -command ("CreateCtrl(\"" + $ctrlColorOption + "\", \"" + $ctrlShapeOption + "\")");     
            
    showWindow;  
}


// Procedure to create different shapes for the controls
global proc MakeShape(string $ctrlNam, string $shapeInfo){
        
        string $ctrlShape = `GetMenuItem($shapeInfo)`;
        
        switch ($ctrlShape){
             case "Square": curve -bezier -d 3 -p 0 -3 3 -p 0 -3 3 -p 0 -3 -3 -p 0 -3 -3 -p 0 -3 -3 -p 0 3 -3 -p 0 3 -3 -p 0 3 -3 -p 0 3 3 -p 0 3 3 -p 0 3 3 -p 0 -3 3 -p 0 -3 3 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1 -k 2 -k 2 -k 2 -k 3 -k 3 -k 3 -k 4 -k 4 -k 4 -name ($ctrlNam + "_ctrl");   
             bezierCurveToNurbs; break;
             
             case "Diamond": curve -bezier -d 3 -p 0 -3 0 -p 0 -3 0 -p 0 0 -3 -p 0 0 -3 -p 0 0 -3 -p 0 3 0 -p 0 3 0 -p 0 3 0 -p 0 0 3 -p 0 0 3 -p 0 0 3 -p 0 -3 0 -p 0 -3 0 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1 -k 2 -k 2 -k 2 -k 3 -k 3 -k 3 -k 4 -k 4 -k 4 -name ($ctrlNam + "_ctrl");
             bezierCurveToNurbs; break;
             
             case "Arc": curve -bezier -d 3 -p 0 0 4.109182 -p 0 0 4.109182 -p -1.425735 1.269807 3.908064 -p -1.425735 1.269807 3.908064 -p -1.425735 1.269807 3.908064 -p -1.425735 3.324399 2.415317 -p -1.425735 3.324399 2.415317 -p -1.425735 3.324399 2.415317 -p -1.425735 4.109183 0 -p -1.425735 4.109183 0 -p -1.425735 4.109183 0 -p -1.425735 3.324399 -2.415317 -p -1.425735 3.324399 -2.415317 -p -1.425735 3.324399 -2.415317 -p -1.425735 1.269807 -3.908066 -p -1.425735 1.269807 -3.908066 -p -1.425735 1.269807 -3.908066 -p 0 0 -4.109181 -p 0 0 -4.109181 -p 0 0 -4.109181 -p 1.425735 1.269807 -3.908066 -p 1.425735 1.269807 -3.908066 -p 1.425735 1.269807 -3.908066 -p 1.425735 3.324399 -2.415317 -p 1.425735 3.324399 -2.415317 -p 1.425735 3.324399 -2.415317 -p 1.425735 4.109183 0 -p 1.425735 4.109183 0 -p 1.425735 4.109183 0 -p 1.425735 3.324399 2.415317 -p 1.425735 3.324399 2.415317 -p 1.425735 3.324399 2.415317 -p 1.425735 1.269807 3.908064 -p 1.425735 1.269807 3.908064 -p 1.425735 1.269807 3.908064 -p 0 0 4.109182 -p 0 0 4.109182 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1 -k 2 -k 2 -k 2 -k 3 -k 3 -k 3 -k 4 -k 4 -k 4 -k 5 -k 5 -k 5 -k 6 -k 6 -k 6 -k 7 -k 7 -k 7 -k 8 -k 8 -k 8 -k 9 -k 9 -k 9 -k 10 -k 10 -k 10 -k 11 -k 11 -k 11 -k 12 -k 12 -k 12 -name ($ctrlNam + "_ctrl");      
             bezierCurveToNurbs; break;
             
             case "Pin": curve -bezier -d 3 -p 0 0 0 -p 0 0 0 -p 0 7 0 -p 0 7 0 -p 0 7 0 -p 0 7 1 -p 0 8 1 -p 0 9 1 -p 0 9 0 -p 0 9 0 -p 0 9 0 -p 0 9 -1 -p 0 8 -1 -p 0 7 -1 -p 0 7 0 -p 0 7 0 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1 -k 2 -k 2 -k 2 -k 3 -k 3 -k 3 -k 4 -k 4 -k 4 -k 5 -k 5 -k 5 -name ($ctrlNam + "_ctrl");             
             bezierCurveToNurbs; break;
             
             default:  circle -c 0 0 0 -nr 0 0 1 -sw 360 -r 4 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1 -name ($ctrlNam + "_ctrl");
             rotate -r -os -fo 0 90 0 ;
             FreezeTransformations; break;      
    }
}

// Create Ctrls .. Ctrl Grps .. color ctrls 
global proc CreateCtrl(string $ctrlColor, string $ctrlShape)
{
    string $Sels[] = `ls -selection`; //Puts the selected objects into an array
    
      if (size($Sels) != 0)
      {
            for ($objs in $Sels) {
                MakeShape($objs, $ctrlShape);             // Calls the MakeShape proc with selection name, and the shape string parameter                 
                ColorControls(($objs + "_ctrl"), $ctrlColor); // Calls ColorControls proc with new shape's name, and color string parameter 
                
                group -empty -name ($objs + "_ctrl_grp");         // Creates an empty group    
                parent ($objs + "_ctrl") ($objs + "_ctrl_grp");   // parents the ctrl under the grp       
                
                select -cl  ;                      // deselects everything
                select -r ($objs + "_ctrl_grp") ;  // selects the new ctrl grp
                select -add $objs ;                // selects the current joint
                MatchTransform;                    // Matches all transformations
                
                select -cl  ;                      // deselects everything
                select -r ($objs + "_ctrl") ;      // selects the new control
                select -add $objs ;                // selects the current joint
                parentConstraint -mo -weight 1;    // parent constrains them
            }    
      }
      else
      {          
        group -empty -name ("temp" + "_ctrl_grp");           // Creates an empty group  
        MakeShape("temp", $ctrlShape);                       // Calls the MakeShape proc with a temporary name, and the shape string parameter              
        ColorControls(("temp" + "_ctrl"), $ctrlColor);           // Calls ColorControls proc with new shape's name, and color string parameter                                
        parent ("temp" + "_ctrl") ("temp" + "_ctrl_grp");    // Parents the new shape ctrl under the group            
        rename ("temp" + "_ctrl_grp") ("new_ctrl_grp_00");   // Renames the grp from temp to new.. so I can do this function again without naming errors              
        rename ("temp" + "_ctrl") ("new_ctrl");              // Renames the ctrl from temp to new.. so I can do this function again without naming errors    
      }      
}

// Get Option Menu Item
global proc string GetMenuItem(string $control){
	string $value = `optionMenu -q -v $control`;
 	return $value;
}

// Procedure to Color the Ctrls
global proc ColorControls(string $ctrl, string $colorInfo)          // Sets color index of the control
{               
        string $shapes[] = `listRelatives -shapes $ctrl`;    // define string array for shapes           
        
        string $colorValue;
        string $ctrlColor = `GetMenuItem($colorInfo)`; // Calls the get menu item function
                
        int $color;
        
        for ($shape in $shapes)
        {            
            if (`nodeType $shape` == "nurbsCurve")           // if statement checks for nurbs curve
            {
                setAttr ($shape + ".overrideEnabled") 1;     // enables override on $shape
                
                switch ($ctrlColor){
                  case "Green"   :      $color = 14; break;  
                  case "Yellow"  :      $color = 17; break;  
                  case "Red"     :      $color = 13; break;   
                  case "Blue"    :      $color = 15; break;   
                  case "Light Yellow":  $color = 22; break;   
                  case "Black"    :     $color = 1;  break;  
                  case "White"   :      $color = 16; break;    
                  default:               $color = 5;  break;
                }                
                
                setAttr ($shape + ".overrideColor") $color;  // Sets $ctrl color to $color
            } 
            else 
            {
                warning ("Selected object is not a curve");  // Spits out a yellow warning
            }            
        }           
}
CTRLGUI();